%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.59.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 598
%%HiResBoundingBox: 0 0 2391.1199 597.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 597.12 re
W
q
[0.24 0 0 -0.24 0 597.12] cm
q
0 0 9962.5 2487.5 re
W*
q
[31.849422 0 0 31.849422 165.617386 -347.15869] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
37 79.900002 m
4 50 l
37 20.1 l
42.200001 25.9 l
15.6 50 l
42.200001 74.099998 l
37 79.900002 l
h
f
63 79.900002 m
57.799999 74.099998 l
84.400002 50 l
57.799999 25.9 l
63 20.1 l
96 50 l
63 79.900002 l
h
f
Q
q
[112.544373 0 0 112.544373 3694.7686 -226.70126] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
5.8303 6.441 m
10.3388 6.441 12.7627 9.9327 12.7627 13.1529 c
12.7627 16.695299 10.322001 20.000401 5.8474 20.000401 c
1.305 20.000401 l
1.13534 20.000401 1.01669 19.88176 1.01669 19.712261 c
1.01669 6.712261 l
1.01669 6.559721 1.11838 6.441071 1.28788 6.441071 c
5.83028 6.441071 l
5.8303 6.441 l
h
5.8814 18.152901 m
9.017 18.152901 10.813801 15.695301 10.796801 13.136001 c
10.796801 10.627501 9.067801 8.288501 5.881401 8.288501 c
2.915301 8.288501 l
2.932249 18.152901 l
5.88145 18.152901 l
5.8814 18.152901 l
h
21.932014 19.627121 m
21.711674 17.966122 21.695215 16.423922 21.762854 14.796921 c
21.847599 12.796921 20.745955 11.50882 18.678154 11.50882 c
17.322254 11.50882 15.915454 11.915601 15.084954 12.373231 c
14.932414 12.457977 14.830714 12.610351 14.898514 12.762891 c
15.322244 13.745941 l
15.39004 13.915431 15.508684 13.966281 15.729024 13.864581 c
16.813725 13.373051 17.695124 13.135771 18.559525 13.135771 c
19.474775 13.135771 20.017124 13.491701 19.983225 14.457771 c
16.847626 14.999971 14.457825 15.559271 14.457825 17.762671 c
14.457825 19.23727 15.525625 20.08457 17.254425 20.08457 c
18.695225 20.08457 19.440825 19.64406 20.152725 19.10169 c
20.237305 19.610161 20.389845 20 20.728825 20 c
21.745724 20 l
21.898104 20 21.948944 19.81356 21.931993 19.627119 c
21.932014 19.627121 l
h
17.576416 18.6273 m
16.881496 18.6273 16.339115 18.390011 16.339115 17.745941 c
16.339115 16.712042 18.237215 16.373041 19.949314 16.017141 c
19.932365 16.576462 19.932365 17.322241 19.949314 17.813742 c
19.389994 18.237473 18.440815 18.627302 17.576414 18.627302 c
17.576416 18.6273 l
h
29.813406 12.0341 m
29.999846 12.15274 30.050695 12.25427 29.931887 12.44071 c
29.237137 13.45761 l
29.152391 13.57625 29.033747 13.61015 28.881207 13.57625 c
28.525276 13.40676 28.220186 13.25422 27.660906 13.25422 c
27.101625 13.25422 26.220205 13.49151 25.745605 14.54232 c
25.745605 19.72892 l
25.745605 19.8813 25.643915 19.999941 25.491365 19.999941 c
24.152365 19.999941 l
23.999825 19.999941 23.898125 19.8813 23.898125 19.72892 c
23.898125 11.88132 l
23.898125 11.72894 24.016766 11.61013 24.152365 11.61013 c
25.084564 11.61013 l
25.491344 11.61013 25.745584 12.03386 25.745584 12.338941 c
25.745584 12.45775 l
26.338804 11.915381 27.050684 11.542501 27.982883 11.542501 c
28.847294 11.542501 29.491383 11.81369 29.813383 12.034031 c
29.813406 12.0341 l
h
35.762581 11.5256 m
37.745682 11.5256 39.64378 13.152901 39.64378 15.695301 c
39.64378 18.169901 38.101379 20.101702 35.711578 20.101702 c
34.796329 20.101702 34.016678 19.796951 33.406677 19.373232 c
33.32193 19.780012 32.864307 20.000181 32.525318 20.000181 c
31.847347 20.000181 l
31.694807 20.000181 31.576157 19.88154 31.576157 19.72916 c
31.576157 7.89816 l
31.576157 7.37274 31.491411 7.10155 31.440567 6.79646 c
31.406836 6.60985 31.457682 6.44036 31.627176 6.44036 c
32.779675 6.44036 l
33.169506 6.44036 33.423744 6.6946 33.423744 7.05053 c
33.423744 12.186131 l
34.000015 11.8302 34.745644 11.52511 35.762543 11.52511 c
35.762581 11.5256 l
h
35.423378 18.390301 m
36.79628 18.390301 37.830177 17.373402 37.830177 15.6954 c
37.830177 13.9666 36.558979 13.237801 35.491177 13.237801 c
34.728466 13.237801 34.033577 13.50899 33.423378 13.898821 c
33.423378 17.83102 l
33.965748 18.136101 34.609779 18.390341 35.423378 18.390341 c
35.423378 18.390301 l
h
42.643879 8.492 m
42.084728 8.492 41.627079 8.05132 41.627079 7.4751 c
41.627079 6.91578 42.084709 6.4582 42.643879 6.4582 c
43.203197 6.4582 43.660778 6.91583 43.660778 7.4751 c
43.660778 8.05137 43.203148 8.492 42.643879 8.492 c
h
43.304878 11.6102 m
41.999779 11.6102 l
41.830288 11.6102 41.728588 11.72901 41.728588 11.88139 c
41.728588 19.32209 l
41.728588 19.71192 41.965878 19.999889 42.372658 19.999889 c
43.321808 19.999889 l
43.474346 19.999889 43.576046 19.898359 43.576046 19.71192 c
43.576046 11.88142 l
43.576046 11.72904 43.457405 11.61023 43.304855 11.61023 c
43.304878 11.6102 l
h
53.084557 19.627121 m
52.864216 17.966122 52.847755 16.423922 52.915398 14.796921 c
53.000145 12.796921 51.898499 11.50882 49.830696 11.50882 c
48.474796 11.50882 47.067997 11.915601 46.237495 12.373231 c
46.084957 12.457977 45.983257 12.610351 46.051056 12.762891 c
46.474785 13.745941 l
46.542583 13.915431 46.661224 13.966281 46.881565 13.864581 c
47.966267 13.373051 48.847664 13.135771 49.712067 13.135771 c
50.627316 13.135771 51.169666 13.491701 51.135765 14.457771 c
48.000164 14.999971 45.610367 15.559271 45.610367 17.762671 c
45.610367 19.23727 46.678165 20.08457 48.406967 20.08457 c
49.847767 20.08457 50.593369 19.64406 51.305267 19.10169 c
51.389847 19.610161 51.542389 20 51.881367 20 c
52.898266 20 l
53.050648 20 53.101486 19.81356 53.084538 19.627119 c
53.084557 19.627121 l
h
48.728958 18.6273 m
48.034039 18.6273 47.491657 18.390011 47.491657 17.745941 c
47.491657 16.712042 49.389759 16.373041 51.101856 16.017141 c
51.084908 16.576462 51.084908 17.322241 51.101856 17.813742 c
50.542538 18.237473 49.593357 18.627302 48.728958 18.627302 c
48.728958 18.6273 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
